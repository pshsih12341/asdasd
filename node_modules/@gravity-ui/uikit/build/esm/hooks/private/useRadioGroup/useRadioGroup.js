import { useControlledState, useUniqId } from '../..';
import { filterDOMProps } from '../../../components/utils/filterDOMProps';
import { useFormResetHandler } from '../useFormResetHandler';
export function useRadioGroup(props) {
    var _a, _b;
    const { name, value, defaultValue, options = [], disabled, onUpdate, onChange, onFocus, onBlur, } = props;
    const controlId = useUniqId();
    const [currentValue, setValueState] = useControlledState(value, 
    // FIXME: Do not set defaultValue to first option value
    (_b = defaultValue !== null && defaultValue !== void 0 ? defaultValue : (_a = options[0]) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : null, onUpdate);
    const fieldRef = useFormResetHandler({
        initialValue: currentValue,
        onReset: setValueState,
    });
    const handleChange = (event) => {
        setValueState(event.target.value);
        if (onChange) {
            onChange(event);
        }
    };
    const containerProps = Object.assign(Object.assign({}, filterDOMProps(props, { labelable: true })), { role: 'radiogroup', 'aria-disabled': disabled });
    const optionsProps = options.map((option) => ({
        name: name || controlId,
        value: option.value,
        content: option.content,
        title: option.title,
        checked: currentValue === String(option.value),
        disabled: disabled || option.disabled,
        onChange: handleChange,
        // FIXME: onFocus and onBlur should be on the container via useFocusWithin hook
        onFocus: onFocus,
        onBlur: onBlur,
        ref: fieldRef,
    }));
    return { containerProps, optionsProps };
}
