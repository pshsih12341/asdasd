import React from 'react';
import type { PopupPlacement } from '../Popup';
import type { QAProps } from '../types';
import type { Props as BreadcrumbsItemProps } from './BreadcrumbsItem';
import type { RenderBreadcrumbsItem, RenderBreadcrumbsItemContent, RenderBreadcrumbsRootContent } from './types';
import './Breadcrumbs.css';
type BaseBreadcrumbsItem = {
    text: string;
    items?: BreadcrumbsItem[];
    title?: string;
};
export type BreadcrumbsLinkItem = {
    href: string;
    action?: (event: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => void;
} & BaseBreadcrumbsItem;
export type BreadcrumbsButtonItem = {
    href?: undefined;
    action: (event: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => void;
} & BaseBreadcrumbsItem;
export type BreadcrumbsItem = BreadcrumbsLinkItem | BreadcrumbsButtonItem;
export interface BreadcrumbsProps<T extends BreadcrumbsItem = BreadcrumbsItem> extends QAProps {
    items: T[];
    className?: string;
    renderRootContent?: RenderBreadcrumbsRootContent<T>;
    renderItemContent?: RenderBreadcrumbsItemContent<T>;
    renderItemDivider?: () => React.ReactNode;
    renderItem?: RenderBreadcrumbsItem<T>;
    lastDisplayedItemsCount: LastDisplayedItemsCount;
    firstDisplayedItemsCount: FirstDisplayedItemsCount;
    popupStyle?: 'staircase';
    popupPlacement?: PopupPlacement;
}
interface BreadcrumbsState<T extends BreadcrumbsItem> {
    calculated: boolean;
    rootItem: T | undefined;
    visibleItems: T[];
    hiddenItems: T[];
    allItems: T[];
}
export declare enum LastDisplayedItemsCount {
    One = 1,
    Two = 2
}
export declare enum FirstDisplayedItemsCount {
    Zero = 0,
    One = 1
}
export declare class Breadcrumbs<T extends BreadcrumbsItem = BreadcrumbsItem> extends React.Component<BreadcrumbsProps<T>, BreadcrumbsState<T>> {
    static defaultProps: {
        popupPlacement: string[];
    };
    static prepareInitialState<T extends BreadcrumbsItem>(props: BreadcrumbsProps<T>): {
        calculated: boolean;
        rootItem: T | undefined;
        visibleItems: T[];
        hiddenItems: never[];
        allItems: T[];
    };
    static getDerivedStateFromProps<T extends BreadcrumbsItem>(props: BreadcrumbsProps<T>, state: BreadcrumbsState<T>): {
        calculated: boolean;
        rootItem: T | undefined;
        visibleItems: T[];
        hiddenItems: never[];
        allItems: T[];
    } | null;
    private container;
    private resizeObserver?;
    constructor(props: BreadcrumbsProps<T>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: BreadcrumbsProps<T>): void;
    componentWillUnmount(): void;
    render(): React.JSX.Element;
    renderItem(item: T, isCurrent: boolean, isPrevCurrent: boolean, renderItemContent?: BreadcrumbsItemProps<T>['renderItemContent']): React.JSX.Element;
    renderItemDivider(): React.JSX.Element;
    renderRootItem(): React.JSX.Element | null;
    renderVisibleItems(): React.JSX.Element[];
    renderMoreItem(): React.JSX.Element | null;
    private recalculate;
    private handleResize;
}
export {};
