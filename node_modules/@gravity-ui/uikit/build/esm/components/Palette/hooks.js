import { useFocusWithin } from '../../hooks/useFocusWithin/useFocusWithin';
import { useDirection } from '../theme/useDirection';
export function usePaletteGrid(props) {
    const direction = useDirection();
    const { focusWithinProps } = useFocusWithin({
        onFocusWithin: (event) => { var _a; return (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, event); },
        onBlurWithin: (event) => { var _a; return (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, event); },
    });
    const whenFocused = props.whenFocused;
    const base = Object.assign({ role: 'grid', 'aria-disabled': props.disabled, 'aria-readonly': props.disabled, tabIndex: whenFocused ? -1 : 0 }, focusWithinProps);
    if (!whenFocused) {
        return base;
    }
    return Object.assign(Object.assign({}, base), { onKeyDown: (event) => {
            if (event.code === 'ArrowRight') {
                event.preventDefault();
                if (direction === 'ltr') {
                    whenFocused.nextItem();
                }
                else {
                    whenFocused.previousItem();
                }
            }
            else if (event.code === 'ArrowLeft') {
                event.preventDefault();
                if (direction === 'ltr') {
                    whenFocused.previousItem();
                }
                else {
                    whenFocused.nextItem();
                }
            }
            else if (event.code === 'ArrowDown') {
                event.preventDefault();
                whenFocused.nextRow();
            }
            else if (event.code === 'ArrowUp') {
                event.preventDefault();
                whenFocused.previousRow();
            }
            else if (event.code === 'Space' || event.code === 'Enter') {
                event.preventDefault();
                whenFocused.selectItem();
            }
        } });
}
