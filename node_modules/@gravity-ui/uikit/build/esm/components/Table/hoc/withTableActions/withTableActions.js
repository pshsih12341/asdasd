'use client';
import { __rest } from "tslib";
import React from 'react';
import { Ellipsis } from '@gravity-ui/icons';
import _memoize from 'lodash/memoize';
import { useUniqId } from '../../../../hooks';
import { useBoolean } from '../../../../hooks/private';
import { Button } from '../../../Button';
import { Icon } from '../../../Icon';
import { Menu } from '../../../Menu';
import { Popup } from '../../../Popup';
import { block } from '../../../utils/cn';
import { getComponentName } from '../../../utils/getComponentName';
import i18n from '../../i18n';
import './withTableActions.css';
export const actionsColumnId = '_actions';
export function enhanceSystemColumn(columns, enhancer) {
    const existedColumn = columns.find(({ id }) => id === actionsColumnId);
    const systemColumn = existedColumn || {
        id: actionsColumnId,
        name: '',
        sticky: 'end',
        width: 28, // button width
        placeholder: '',
    };
    enhancer(systemColumn);
    return existedColumn ? columns : [...columns, systemColumn];
}
const isActionGroup = (config) => {
    return Array.isArray(config.items);
};
const b = block('table');
const actionsCn = b('actions');
const actionsButtonCn = b('actions-button');
const bPopup = block('table-action-popup');
const menuCn = bPopup('menu');
const menuItemCn = bPopup('menu-item');
const DEFAULT_PLACEMENT = ['bottom-end', 'top-end', 'auto'];
const DefaultRowActions = ({ index, item, getRowActions, getRowDescriptor, rowActionsSize, isRowDisabled, }) => {
    var _a;
    const [isPopupOpen, , closePopup, togglePopup] = useBoolean(false);
    const anchorRef = React.useRef(null);
    const rowId = useUniqId();
    if (getRowActions === undefined) {
        return null;
    }
    const renderPopupMenuItem = (action, index) => {
        if (isActionGroup(action)) {
            return (React.createElement(Menu.Group, { key: index, label: action.title }, action.items.map(renderPopupMenuItem)));
        }
        const { text, icon, handler, href } = action, restProps = __rest(action, ["text", "icon", "handler", "href"]);
        return (React.createElement(Menu.Item, Object.assign({ key: index, onClick: (event) => {
                event.stopPropagation();
                handler(item, index, event);
                closePopup();
            }, href: typeof href === 'function' ? href(item, index) : href, iconStart: icon, className: menuItemCn }, restProps), text));
    };
    const disabled = ((_a = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index)) === null || _a === void 0 ? void 0 : _a.disabled) || (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(item, index));
    const actions = getRowActions(item, index);
    if (actions.length === 0) {
        return null;
    }
    return (React.createElement("div", { className: actionsCn },
        React.createElement(Popup, { open: isPopupOpen, anchorRef: anchorRef, placement: DEFAULT_PLACEMENT, onOutsideClick: closePopup, id: rowId },
            React.createElement(Menu, { className: menuCn, size: rowActionsSize }, actions.map(renderPopupMenuItem))),
        React.createElement(Button, { view: "flat-secondary", className: actionsButtonCn, onClick: togglePopup, size: rowActionsSize, ref: anchorRef, disabled: disabled, extraProps: {
                'aria-label': i18n('label-actions'),
                'aria-expanded': isPopupOpen,
                'aria-controls': rowId,
            } },
            React.createElement(Icon, { data: Ellipsis }))));
};
export function withTableActions(TableComponent) {
    var _a;
    const componentName = getComponentName(TableComponent);
    const displayName = `withTableActions(${componentName})`;
    return _a = class extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    popupOpen: false,
                    popupData: null,
                };
                this.renderBodyCell = (item, index) => {
                    const { getRowActions, rowActionsSize, renderRowActions, isRowDisabled, getRowDescriptor, } = this.props;
                    if (renderRowActions) {
                        return renderRowActions({ item, index });
                    }
                    return (React.createElement(DefaultRowActions, { index: index, item: item, getRowActions: getRowActions, rowActionsSize: rowActionsSize, getRowDescriptor: getRowDescriptor, isRowDisabled: isRowDisabled }));
                };
                // eslint-disable-next-line @typescript-eslint/member-ordering
                this.enhanceColumns = _memoize((columns) => enhanceSystemColumn(columns, (systemColumn) => {
                    systemColumn.template = this.renderBodyCell;
                }));
                // eslint-disable-next-line @typescript-eslint/member-ordering
                this.enhanceOnRowClick = _memoize((onRowClick) => {
                    if (!onRowClick) {
                        return onRowClick;
                    }
                    return (item, index, event) => {
                        if (
                        // @ts-expect-error
                        event.nativeEvent.target.closest(`.${menuCn}`)) {
                            return undefined;
                        }
                        if (
                        // @ts-expect-error
                        event.nativeEvent.target.matches(`.${actionsButtonCn}, .${actionsButtonCn} *`)) {
                            return undefined;
                        }
                        return onRowClick(item, index, event);
                    };
                });
            }
            render() {
                const _b = this.props, { renderRowActions, // eslint-disable-line @typescript-eslint/no-unused-vars
                getRowActions, // eslint-disable-line @typescript-eslint/no-unused-vars
                columns, onRowClick } = _b, restTableProps = __rest(_b, ["renderRowActions", "getRowActions", "columns", "onRowClick"]);
                return (React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) })));
            }
        },
        _a.displayName = displayName,
        _a;
}
