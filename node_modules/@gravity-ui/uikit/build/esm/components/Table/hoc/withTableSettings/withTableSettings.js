'use client';
import { __rest } from "tslib";
import React from 'react';
import { Gear } from '@gravity-ui/icons';
import _get from 'lodash/get';
import _isEqual from 'lodash/isEqual';
import _isString from 'lodash/isString';
import _last from 'lodash/last';
import { Button } from '../../../Button';
import { Icon } from '../../../Icon';
import { block } from '../../../utils/cn';
import { getComponentName } from '../../../utils/getComponentName';
import { actionsColumnId, enhanceSystemColumn } from '../withTableActions/withTableActions';
import { selectionColumnId } from '../withTableSelection/withTableSelection';
import { TableColumnSetup } from './TableColumnSetup/TableColumnSetup';
import i18n from './i18n';
import './withTableSettings.css';
export function filterColumns(columns, settings) {
    const filteredColumns = settings
        .map(({ id, isSelected }) => ({
        isSelected,
        columnSettings: columns.find((column) => id === column.id),
    }))
        .filter(({ isSelected, columnSettings }) => isSelected && columnSettings)
        .map(({ columnSettings }) => columnSettings);
    if (columns[0] && columns[0].id === selectionColumnId) {
        filteredColumns.unshift(columns[0]);
    }
    const lastColumn = _last(columns);
    if (lastColumn && lastColumn.id === actionsColumnId) {
        filteredColumns.push(lastColumn);
    }
    return filteredColumns;
}
export function getColumnStringTitle(column) {
    if (_isString(column.name)) {
        return column.name;
    }
    const originalName = _get(column, ['meta', '_originalName']);
    if (_isString(originalName)) {
        return originalName;
    }
    return column.id;
}
const getTableColumnSetupItem = (id, isSelected, column) => {
    var _a;
    const isProtected = Boolean((_a = column === null || column === void 0 ? void 0 : column.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);
    return {
        id,
        isSelected: isProtected ? true : isSelected,
        isRequired: isProtected,
        title: column ? getColumnStringTitle(column) : id,
        sticky: column === null || column === void 0 ? void 0 : column.sticky,
    };
};
export function getActualItems(columns, settings) {
    const sortableItems = [];
    settings.forEach(({ id, isSelected }) => {
        const column = columns.find((column) => id === column.id);
        if (column) {
            sortableItems.push(getTableColumnSetupItem(id, isSelected, column));
        }
    });
    columns.forEach((column) => {
        var _a;
        if (column.id !== actionsColumnId &&
            column.id !== selectionColumnId &&
            settings.every((setting) => setting.id !== column.id)) {
            const isSelected = ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false;
            sortableItems.push(getTableColumnSetupItem(column.id, isSelected, column));
        }
    });
    return sortableItems;
}
const b = block('table');
const POPUP_PLACEMENT = ['bottom-end', 'bottom', 'top-end', 'top', 'auto'];
export function withTableSettings(ComponentOrOptions) {
    function tableWithSettingsFactory(TableComponent, { width, sortable, filterable } = {}) {
        const componentName = getComponentName(TableComponent);
        function TableWithSettings(_a) {
            var { updateSettings, settings, columns, settingsPopupWidth, renderControls, defaultSettings, showResetButton, settingsFilterPlaceholder, settingsFilterEmptyMessage, filterSettings } = _a, restTableProps = __rest(_a, ["updateSettings", "settings", "columns", "settingsPopupWidth", "renderControls", "defaultSettings", "showResetButton", "settingsFilterPlaceholder", "settingsFilterEmptyMessage", "filterSettings"]);
            const defaultActualItems = React.useMemo(() => {
                if (!defaultSettings) {
                    return undefined;
                }
                return getActualItems(columns, defaultSettings);
            }, [columns, defaultSettings]);
            const enhancedColumns = React.useMemo(() => {
                const actualItems = getActualItems(columns, settings || []);
                return enhanceSystemColumn(filterColumns(columns, actualItems), (systemColumn) => {
                    systemColumn.name = () => (React.createElement("div", { className: b('settings') },
                        React.createElement(TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: POPUP_PLACEMENT, sortable: sortable, filterable: filterable, filterPlaceholder: settingsFilterPlaceholder, filterEmptyMessage: settingsFilterEmptyMessage, filterSettings: filterSettings, onUpdate: updateSettings, items: actualItems, renderSwitcher: ({ onClick }) => (React.createElement(Button, { view: "flat", className: b('settings-button'), extraProps: { 'aria-label': i18n('label_settings') }, onClick: onClick },
                                React.createElement(Icon, { data: Gear }))), renderControls: renderControls, defaultItems: defaultActualItems, showResetButton: showResetButton })));
                });
            }, [
                columns,
                settings,
                settingsPopupWidth,
                updateSettings,
                renderControls,
                defaultActualItems,
                showResetButton,
            ]);
            return (React.createElement(React.Fragment, null,
                React.createElement(TableComponent, Object.assign({}, restTableProps, { columns: enhancedColumns }))));
        }
        TableWithSettings.displayName = `withTableSettings(${componentName})`;
        return TableWithSettings;
    }
    if (typeof ComponentOrOptions === 'function') {
        return tableWithSettingsFactory(ComponentOrOptions);
    }
    else {
        return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);
    }
}
