import React from 'react';
import type { PopperAnchorRef, PopperPlacement, PopperProps } from '../../hooks/private';
import type { DOMProps, QAProps } from '../types';
import type { LayerExtendableProps } from '../utils/layer-manager/LayerManager';
import './Popup.css';
export type PopupPlacement = PopperPlacement;
export type PopupAnchorRef = PopperAnchorRef;
export interface PopupProps extends DOMProps, LayerExtendableProps, PopperProps, QAProps {
    children?: React.ReactNode;
    /** Manages `Popup` visibility */
    open?: boolean;
    /** `Popup` will not be removed from the DOM upon hiding */
    keepMounted?: boolean;
    /** Render an arrow pointing to the anchor */
    hasArrow?: boolean;
    /** Do not use `LayerManager` on stacking popups */
    disableLayer?: boolean;
    /** @deprecated Add onClick handler to children */
    onClick?: React.MouseEventHandler<HTMLDivElement>;
    /** `mouseenter` event handler */
    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;
    /** `mouseleave` event handler */
    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;
    /** `focus` event handler */
    onFocus?: React.FocusEventHandler<HTMLDivElement>;
    /** `blur` event handler */
    onBlur?: React.FocusEventHandler<HTMLDivElement>;
    /** On start open popup animation void callback */
    onTransitionEnter?: VoidFunction;
    /** On finish open popup animation void callback */
    onTransitionEntered?: VoidFunction;
    /** On start close popup animation void callback */
    onTransitionExit?: VoidFunction;
    /** On finish close popup animation void callback */
    onTransitionExited?: VoidFunction;
    /** Do not use `Portal` for children */
    disablePortal?: boolean;
    /** DOM element children to be mounted to */
    container?: HTMLElement;
    /** HTML `class` attribute for content node */
    contentClassName?: string;
    /** If true, the focus will return to the anchor element */
    restoreFocus?: boolean;
    /** Element the focus will be restored to, depends on `restoreFocus` */
    restoreFocusRef?: React.RefObject<HTMLElement>;
    /** `aria-label` attribute, use this attribute only if you didn't have visible caption */
    'aria-label'?: React.AriaAttributes['aria-label'];
    /** `aria-labelledby` attribute, prefer this attribute if you have visible caption */
    'aria-labelledby'?: React.AriaAttributes['aria-labelledby'];
    /** `aria-modal` attribute, default value is equal to focusTrap */
    'aria-modal'?: React.AriaAttributes['aria-modal'];
    /** `aria-role` attribute */
    role?: React.AriaRole;
    /** HTML `id` attribute */
    id?: string;
    /** Enable focus trapping behavior */
    focusTrap?: boolean;
    /** While open, the focus will be set to the first interactive element in the content */
    autoFocus?: boolean;
}
export declare function Popup({ keepMounted, hasArrow, offset, open, placement, anchorRef, disableEscapeKeyDown, disableOutsideClick, disableLayer, style, className, contentClassName, modifiers, children, onEscapeKeyDown, onOutsideClick, onClose, onClick, onMouseEnter, onMouseLeave, onFocus, onBlur, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, disablePortal, container, strategy, qa, restoreFocus, restoreFocusRef, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, role: roleProp, id, focusTrap, autoFocus, 'aria-modal': ariaModal, }: PopupProps): React.JSX.Element;
