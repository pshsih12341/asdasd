import React from 'react';
import { ArrowToggle } from '../../ArrowToggle';
import { warnOnce } from '../../utils/warn';
import { useDisclosureAttributes, useToggleDisclosure } from '../DisclosureContext';
import { DisclosureQa, b } from '../constants';
const ComponentSizeToIconSizeMap = {
    m: 14,
    l: 16,
    xl: 20,
};
function warnAboutPhysicalValues() {
    warnOnce('[Disclosure] Physical values (left, right) of "arrowPosition" property are deprecated. Use logical values (start, end) instead.');
}
export function DisclosureSummary({ children: renderFunction }) {
    const handleToggle = useToggleDisclosure();
    const { ariaControls, ariaLabelledby: id, expanded, disabled } = useDisclosureAttributes();
    const props = { onClick: handleToggle, ariaControls, id, expanded, disabled };
    return renderFunction(props, React.createElement(DefaultDisclosureSummary, Object.assign({}, props)));
}
export function DefaultDisclosureSummary({ onClick, ariaControls, id, expanded, disabled, }) {
    const { size, summary, arrowPosition } = useDisclosureAttributes();
    let arrowMod = arrowPosition;
    if (arrowMod === 'left') {
        warnAboutPhysicalValues();
        arrowMod = 'start';
    }
    if (arrowMod === 'right') {
        warnAboutPhysicalValues();
        arrowMod = 'end';
    }
    return (React.createElement("button", { type: "button", "aria-expanded": expanded, className: b('trigger', { disabled, arrow: arrowMod }), "aria-controls": ariaControls, id: id, onClick: onClick, disabled: disabled, "data-qa": DisclosureQa.SUMMARY },
        React.createElement(ArrowToggle, { size: ComponentSizeToIconSizeMap[size], direction: expanded ? 'top' : 'bottom' }),
        summary));
}
DisclosureSummary.displayName = 'DisclosureSummary';
