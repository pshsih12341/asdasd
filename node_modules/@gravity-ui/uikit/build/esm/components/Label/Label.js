'use client';
import React from 'react';
import { Xmark } from '@gravity-ui/icons';
import { ClipboardIcon } from '../ClipboardIcon';
import { CopyToClipboard } from '../CopyToClipboard';
import { Icon } from '../Icon';
import { block } from '../utils/cn';
import './Label.css';
const b = block('label');
const sizeMap = {
    xs: { copyIconSize: 12, closeIconSize: 12 },
    s: { copyIconSize: 14, closeIconSize: 14 },
    m: { copyIconSize: 16, closeIconSize: 16 },
};
export const Label = React.forwardRef(function Label(props, ref) {
    const { type = 'default', theme = 'normal', size = 'xs', title, icon, children, onCloseClick, className, disabled, copyText, closeButtonLabel, copyButtonLabel, interactive = false, value, onCopy, onClick, qa, } = props;
    const hasContent = Boolean(children !== '' && React.Children.count(children) > 0);
    const typeClose = type === 'close' && hasContent;
    const typeCopy = type === 'copy' && hasContent;
    const hasOnClick = typeof onClick === 'function';
    const hasCopy = Boolean(typeCopy && copyText);
    const isInteractive = (hasOnClick || hasCopy || interactive) && !disabled;
    const { copyIconSize, closeIconSize } = sizeMap[size];
    const startIcon = icon && (React.createElement("div", { className: b('addon', { side: hasContent ? 'start' : undefined, type: 'icon' }) }, icon));
    const content = hasContent && (React.createElement("div", { className: b('text') },
        React.createElement("div", { className: b('content') }, children),
        Boolean(value) && (React.createElement("div", { className: b('value') },
            React.createElement("div", { className: b('separator') }, ":"),
            React.createElement("div", { className: b('key') }, value)))));
    const renderLabel = (status) => {
        let actionButton;
        if (typeCopy) {
            actionButton = (React.createElement("button", { type: "button", "aria-label": copyButtonLabel || undefined, onClick: hasOnClick ? onClick : undefined, disabled: disabled, className: b('addon', {
                    side: 'end',
                    type: 'button',
                }) },
                React.createElement(ClipboardIcon, { status: status || 'pending', size: copyIconSize })));
        }
        else if (typeClose) {
            actionButton = (React.createElement("button", { type: "button", onClick: onCloseClick, "aria-label": closeButtonLabel || undefined, disabled: disabled, className: b('addon', {
                    side: 'end',
                    type: 'button',
                }) },
                React.createElement(Icon, { size: closeIconSize, data: Xmark })));
        }
        return (React.createElement("div", { ref: ref, className: b({
                theme,
                size,
                interactive: isInteractive,
                disabled,
            }, className), title: title, "data-qa": qa },
            startIcon,
            hasOnClick ? (React.createElement("button", { disabled: disabled, type: "button", onClick: onClick, className: b('main-button') }, content)) : (content),
            actionButton));
    };
    if (hasCopy && copyText && !hasOnClick) {
        return (React.createElement(CopyToClipboard, { text: copyText, onCopy: onCopy, timeout: 1000 }, (status) => renderLabel(status)));
    }
    return renderLabel();
});
