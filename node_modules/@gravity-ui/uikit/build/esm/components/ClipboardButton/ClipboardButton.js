'use client';
import { __rest } from "tslib";
import React from 'react';
import { ActionTooltip } from '../ActionTooltip';
import { Button } from '../Button';
import { ClipboardIcon } from '../ClipboardIcon';
import { CopyToClipboard } from '../CopyToClipboard';
import i18n from './i18n';
const DEFAULT_TIMEOUT = 1000;
const ButtonSizeToIconSize = {
    xs: 12,
    s: 16,
    m: 16,
    l: 16,
    xl: 20,
};
const ClipboardButtonComponent = (props) => {
    const { size = 'm', hasTooltip = true, tooltipInitialText = i18n('startCopy'), tooltipSuccessText = i18n('endCopy'), status, view = 'flat', extraProps = {}, children, iconPosition = 'start' } = props, rest = __rest(props, ["size", "hasTooltip", "tooltipInitialText", "tooltipSuccessText", "status", "view", "extraProps", "children", "iconPosition"]);
    const buttonIcon = (React.createElement(Button.Icon, null,
        React.createElement(ClipboardIcon, { size: ButtonSizeToIconSize[size], status: status })));
    return (React.createElement(ActionTooltip, { disabled: !hasTooltip, title: status === 'success' ? tooltipSuccessText : tooltipInitialText },
        React.createElement(Button, Object.assign({ view: view, size: size, extraProps: Object.assign({ 'aria-label': tooltipInitialText }, extraProps) }, rest),
            iconPosition === 'start' ? buttonIcon : null,
            children,
            iconPosition === 'end' ? buttonIcon : null)));
};
export function ClipboardButton(props) {
    const { text, timeout = DEFAULT_TIMEOUT, onCopy, options } = props, buttonProps = __rest(props, ["text", "timeout", "onCopy", "options"]);
    return (React.createElement(CopyToClipboard, { text: text, timeout: timeout, onCopy: onCopy, options: options }, (status) => React.createElement(ClipboardButtonComponent, Object.assign({}, buttonProps, { status: status }))));
}
