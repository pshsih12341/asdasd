'use client';
import React from 'react';
import { TriangleExclamation } from '@gravity-ui/icons';
import { useControlledState, useForkRef, useUniqId } from '../../../hooks';
import { useElementSize, useFormResetHandler } from '../../../hooks/private';
import { Icon } from '../../Icon';
import { Popover } from '../../Popover';
import { block } from '../../utils/cn';
import { ClearButton, mapTextInputSizeToButtonSize } from '../common';
import { OuterAdditionalContent } from '../common/OuterAdditionalContent/OuterAdditionalContent';
import { CONTROL_ERROR_ICON_QA, errorPropsMapper, getInputControlState, prepareAutoComplete, } from '../utils';
import { AdditionalContent } from './AdditionalContent';
import { TextInputControl } from './TextInputControl';
import './TextInput.css';
const b = block('text-input');
export const TextInput = React.forwardRef(
// eslint-disable-next-line complexity
function TextInput(props, ref) {
    const { view = 'normal', size = 'm', pin = 'round-round', name, value, defaultValue, label, disabled, readOnly, hasClear = false, error, errorMessage: errorMessageProp, errorPlacement: errorPlacementProp = 'outside', validationState: validationStateProp, autoComplete, id: idProp, tabIndex, style, className, qa, controlProps: controlPropsProp, leftContent, rightContent, startContent = leftContent, endContent = rightContent, unstable_endContent: unstableEndContent, note, onUpdate, onChange, } = props;
    const { errorMessage, errorPlacement, validationState } = errorPropsMapper({
        error,
        errorMessage: errorMessageProp,
        errorPlacement: errorPlacementProp,
        validationState: validationStateProp,
    });
    const [inputValue, setInputValue] = useControlledState(value, defaultValue !== null && defaultValue !== void 0 ? defaultValue : '', onUpdate);
    const innerControlRef = React.useRef(null);
    const fieldRef = useFormResetHandler({ initialValue: inputValue, onReset: setInputValue });
    const handleRef = useForkRef(props.controlRef, innerControlRef, fieldRef);
    const labelRef = React.useRef(null);
    const startContentRef = React.useRef(null);
    const state = getInputControlState(validationState);
    const isLabelVisible = Boolean(label);
    const isErrorMsgVisible = validationState === 'invalid' && Boolean(errorMessage) && errorPlacement === 'outside';
    const isErrorIconVisible = validationState === 'invalid' && Boolean(errorMessage) && errorPlacement === 'inside';
    const isClearControlVisible = Boolean(hasClear && !disabled && !readOnly && inputValue);
    const isStartContentVisible = Boolean(startContent);
    const isUnstableEndContentVisible = Boolean(unstableEndContent);
    const isEndContentVisible = Boolean(endContent) && !isUnstableEndContentVisible;
    const isAutoCompleteOff = isLabelVisible && !idProp && !name && typeof autoComplete === 'undefined';
    const innerId = useUniqId();
    const id = isLabelVisible ? idProp || innerId : idProp;
    const labelSize = useElementSize(isLabelVisible ? labelRef : null, size);
    const startContentSize = useElementSize(isStartContentVisible ? startContentRef : null, size);
    const errorMessageId = useUniqId();
    const noteId = useUniqId();
    const ariaDescribedBy = [
        controlPropsProp === null || controlPropsProp === void 0 ? void 0 : controlPropsProp['aria-describedby'],
        note ? noteId : undefined,
        isErrorMsgVisible ? errorMessageId : undefined,
    ]
        .filter(Boolean)
        .join(' ');
    const controlProps = Object.assign(Object.assign({}, controlPropsProp), { style: Object.assign(Object.assign({}, controlPropsProp === null || controlPropsProp === void 0 ? void 0 : controlPropsProp.style), (isLabelVisible && labelSize.width
            ? { paddingInlineStart: `${labelSize.width}px` }
            : {})), 'aria-invalid': validationState === 'invalid' || undefined, 'aria-describedby': ariaDescribedBy || undefined });
    const commonProps = {
        id,
        tabIndex,
        name,
        onChange(event) {
            setInputValue(event.target.value);
            if (onChange) {
                onChange(event);
            }
        },
        autoComplete: isAutoCompleteOff ? 'off' : prepareAutoComplete(autoComplete),
        controlProps,
    };
    const handleClear = (event) => {
        setInputValue('');
        const control = innerControlRef.current;
        if (control) {
            const syntheticEvent = Object.create(event);
            syntheticEvent.target = control;
            syntheticEvent.currentTarget = control;
            control.value = '';
            if (onChange) {
                onChange(syntheticEvent);
            }
        }
    };
    const handleAdditionalContentClick = (event) => {
        var _a, _b;
        const needActivateInput = !event.currentTarget.contains(document.activeElement) &&
            event.currentTarget.contains(event.target);
        const hasSelection = Boolean((_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString());
        if (needActivateInput && !hasSelection) {
            (_b = innerControlRef.current) === null || _b === void 0 ? void 0 : _b.focus();
        }
    };
    return (React.createElement("span", { ref: ref, style: style, className: b({
            view,
            size,
            disabled,
            state,
            pin: view === 'clear' ? undefined : pin,
            'has-clear': isClearControlVisible,
            'has-start-content': isStartContentVisible,
            'has-end-content': isClearControlVisible ||
                isEndContentVisible ||
                isUnstableEndContentVisible,
            'has-unstable-end-content': isUnstableEndContentVisible,
        }, className), "data-qa": qa },
        React.createElement("span", { className: b('content') },
            isStartContentVisible && (React.createElement(AdditionalContent, { ref: startContentRef, placement: "start", onClick: handleAdditionalContentClick }, startContent)),
            isLabelVisible && (React.createElement("label", { ref: labelRef, style: {
                    insetInlineStart: isStartContentVisible
                        ? startContentSize.width
                        : undefined,
                    maxWidth: `calc(50% - ${startContentSize.width}px)`,
                }, className: b('label'), title: label, htmlFor: id }, `${label}`)),
            React.createElement(TextInputControl, Object.assign({}, props, commonProps, { controlRef: handleRef })),
            isClearControlVisible && (React.createElement(ClearButton, { size: mapTextInputSizeToButtonSize(size), onClick: handleClear, className: b('clear', { size }) })),
            isEndContentVisible && (React.createElement(AdditionalContent, { placement: "end", onClick: handleAdditionalContentClick }, endContent)),
            isErrorIconVisible && (React.createElement(Popover, { content: errorMessage },
                React.createElement("span", { "data-qa": CONTROL_ERROR_ICON_QA },
                    React.createElement(Icon, { data: TriangleExclamation, className: b('error-icon'), size: size === 's' ? 12 : 16 })))),
            isUnstableEndContentVisible && (React.createElement(AdditionalContent, { placement: "end", onClick: handleAdditionalContentClick }, unstableEndContent))),
        React.createElement(OuterAdditionalContent, { note: note, errorMessage: isErrorMsgVisible ? errorMessage : null, noteId: noteId, errorMessageId: errorMessageId })));
});
