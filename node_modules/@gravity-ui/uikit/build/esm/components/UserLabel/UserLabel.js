import React from 'react';
import { Envelope, Xmark } from '@gravity-ui/icons';
import { Avatar } from '../Avatar';
import { Icon } from '../Icon';
import { block } from '../utils/cn';
import i18n from './i18n';
import './UserLabel.css';
const b = block('user-label');
export const UserLabel = React.forwardRef(({ type = 'person', avatar, children, view = 'outlined', onClick, onCloseClick, className, style, qa, size = 's', }, ref) => {
    const clickable = Boolean(onClick);
    const closeable = Boolean(onCloseClick);
    const MainComponent = clickable ? 'button' : 'div';
    let avatarView = null;
    let avatarProps;
    if (typeof avatar === 'string') {
        avatarProps = {
            imgUrl: avatar,
        };
    }
    else if (avatar && !React.isValidElement(avatar)) {
        avatarProps = avatar;
    }
    else if (!avatar && typeof children === 'string') {
        avatarProps = {
            text: children,
        };
    }
    switch (type) {
        case 'email':
            avatarView = React.createElement(Avatar, Object.assign({ icon: Envelope }, (avatarProps || {}), { size: size }));
            break;
        case 'empty':
            avatarView = null;
            break;
        case 'person':
        default:
            if (React.isValidElement(avatar)) {
                avatarView = avatar;
            }
            else if (avatarProps) {
                avatarView = React.createElement(Avatar, Object.assign({}, avatarProps, { size: size }));
            }
            break;
    }
    return (React.createElement("div", { className: b({
            view,
            empty: !avatarView,
            clickable,
            closeable,
            size,
        }, className), style: style, "data-qa": qa, ref: ref },
        React.createElement(MainComponent, { className: b('main'), type: clickable ? 'button' : undefined, onClick: onClick },
            avatarView ? React.createElement("div", { className: b('avatar') }, avatarView) : null,
            React.createElement("div", { className: b('text') }, children)),
        onCloseClick ? (React.createElement("button", { className: b('close'), type: "button", "aria-label": i18n('label_remove-button'), onClick: onCloseClick },
            React.createElement(Icon, { className: b('close-icon'), data: Xmark, size: 12 }))) : null));
});
UserLabel.displayName = 'UserLabel';
