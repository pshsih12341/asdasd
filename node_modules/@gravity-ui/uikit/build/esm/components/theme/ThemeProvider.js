'use client';
import React from 'react';
import { PrivateLayoutProvider } from '../layout/LayoutProvider/LayoutProvider';
import { block } from '../utils/cn';
import { ThemeContext } from './ThemeContext';
import { ThemeSettingsContext } from './ThemeSettingsContext';
import { DEFAULT_DARK_THEME, DEFAULT_DIRECTION, DEFAULT_LIGHT_THEME, DEFAULT_THEME, ROOT_CLASSNAME, } from './constants';
import { updateBodyClassName, updateBodyDirection } from './dom-helpers';
import { useSystemTheme } from './useSystemTheme';
const b = block(ROOT_CLASSNAME);
export function ThemeProvider({ theme: themeProp, systemLightTheme: systemLightThemeProp, systemDarkTheme: systemDarkThemeProp, direction: directionProp, nativeScrollbar, scoped: scopedProp = false, rootClassName = '', children, layout, }) {
    var _a, _b, _c, _d;
    const parentThemeState = React.useContext(ThemeContext);
    const systemThemeState = React.useContext(ThemeSettingsContext);
    const hasParentProvider = parentThemeState !== undefined;
    const scoped = hasParentProvider || scopedProp;
    const parentTheme = (_a = parentThemeState === null || parentThemeState === void 0 ? void 0 : parentThemeState.theme) !== null && _a !== void 0 ? _a : DEFAULT_THEME;
    const theme = themeProp !== null && themeProp !== void 0 ? themeProp : parentTheme;
    const systemLightTheme = (_b = systemLightThemeProp !== null && systemLightThemeProp !== void 0 ? systemLightThemeProp : systemThemeState === null || systemThemeState === void 0 ? void 0 : systemThemeState.systemLightTheme) !== null && _b !== void 0 ? _b : DEFAULT_LIGHT_THEME;
    const systemDarkTheme = (_c = systemDarkThemeProp !== null && systemDarkThemeProp !== void 0 ? systemDarkThemeProp : systemThemeState === null || systemThemeState === void 0 ? void 0 : systemThemeState.systemDarkTheme) !== null && _c !== void 0 ? _c : DEFAULT_DARK_THEME;
    const parentDirection = (_d = parentThemeState === null || parentThemeState === void 0 ? void 0 : parentThemeState.direction) !== null && _d !== void 0 ? _d : DEFAULT_DIRECTION;
    const direction = directionProp !== null && directionProp !== void 0 ? directionProp : parentDirection;
    const systemTheme = useSystemTheme() === 'light' ? systemLightTheme : systemDarkTheme;
    const themeValue = theme === 'system' ? systemTheme : theme;
    const prevRootClassName = React.useRef('');
    React.useLayoutEffect(() => {
        if (!scoped) {
            updateBodyClassName({
                theme: themeValue,
                nativeScrollbar,
                className: rootClassName,
                prevClassName: prevRootClassName.current,
            });
            updateBodyDirection(direction);
            prevRootClassName.current = rootClassName;
        }
    }, [scoped, themeValue, direction, nativeScrollbar, rootClassName]);
    const contextValue = React.useMemo(() => ({
        theme,
        themeValue,
        direction,
        scoped,
    }), [theme, themeValue, direction, scoped]);
    const themeSettingsContext = React.useMemo(() => ({ systemLightTheme, systemDarkTheme }), [systemLightTheme, systemDarkTheme]);
    return (React.createElement(PrivateLayoutProvider, Object.assign({}, layout),
        React.createElement(ThemeContext.Provider, { value: contextValue },
            React.createElement(ThemeSettingsContext.Provider, { value: themeSettingsContext }, scoped ? (React.createElement("div", { className: b({
                    theme: themeValue,
                    'native-scrollbar': nativeScrollbar !== false,
                }, rootClassName), dir: direction }, children)) : (children)))));
}
ThemeProvider.displayName = 'ThemeProvider';
