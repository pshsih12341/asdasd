import { __rest } from "tslib";
import React from 'react';
import { Check, ChevronDown, ChevronUp } from '@gravity-ui/icons';
import { Icon } from '../../../Icon';
import { Text, colorText } from '../../../Text';
import { Flex } from '../../../layout';
import { b } from './styles';
export const isListItemContentPropsGuard = (props) => {
    return typeof props === 'object' && props !== null && 'title' in props;
};
const ListItemViewSlot = (_a) => {
    var { children, indentation = 1, className } = _a, props = __rest(_a, ["children", "indentation", "className"]);
    return (React.createElement(Flex, Object.assign({ width: indentation * 16, className: b('slot', className) }, props), children));
};
const renderSafeIndentation = (indentation) => {
    if (indentation && indentation >= 1) {
        return (React.createElement(ListItemViewSlot, { indentation: Math.floor(indentation) }));
    }
    return null;
};
export const ListItemViewContent = ({ startSlot, subtitle, endSlot, disabled, hasSelectionIcon, isGroup, indentation, expanded, selected, title, }) => {
    return (React.createElement(Flex, { alignItems: "center", justifyContent: "space-between", gap: "4", className: b('content') },
        React.createElement(Flex, { gap: "2", alignItems: "center", grow: true },
            hasSelectionIcon && (React.createElement(ListItemViewSlot // reserve space
            , null, selected ? (React.createElement(Icon, { data: Check, size: 16, className: colorText({ color: 'info' }) })) : null)),
            renderSafeIndentation(indentation),
            isGroup ? (React.createElement(Icon, { className: b('icon', colorText({ color: disabled ? 'hint' : undefined })), data: expanded ? ChevronDown : ChevronUp, size: 16 })) : null,
            startSlot,
            React.createElement("div", { className: b('main-content') },
                typeof title === 'string' ? (React.createElement(Text, { ellipsis: true, color: disabled ? 'hint' : undefined, variant: isGroup ? 'subheader-1' : undefined }, title)) : (title),
                typeof subtitle === 'string' ? (React.createElement(Text, { ellipsis: true, color: disabled ? 'hint' : 'secondary' }, subtitle)) : (subtitle))),
        endSlot));
};
