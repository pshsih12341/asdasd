/* eslint-disable valid-jsdoc */
import React from 'react';
import { useFlattenListItems } from './useFlattenListItems';
import { useListParsedState } from './useListParsedState';
import { useListState } from './useListState';
/**
 * Take array of items as a argument with params described what type of list initial data represents.
 */
export const useList = ({ items, getItemId, defaultExpandedState = 'expanded', withExpandedState = true, initialState: initialValues, controlledState, }) => {
    const { itemsById, groupsState, itemsState, initialState } = useListParsedState({
        items,
        getItemId,
        defaultExpandedState,
    });
    const initValues = React.useMemo(() => {
        return {
            expandedById: Object.assign(Object.assign({}, initialState.expandedById), initialValues === null || initialValues === void 0 ? void 0 : initialValues.expandedById),
            selectedById: Object.assign(Object.assign({}, initialState.selectedById), initialValues === null || initialValues === void 0 ? void 0 : initialValues.selectedById),
            disabledById: Object.assign(Object.assign({}, initialState.disabledById), initialValues === null || initialValues === void 0 ? void 0 : initialValues.disabledById),
            activeItemId: initialValues === null || initialValues === void 0 ? void 0 : initialValues.activeItemId,
        };
    }, [
        initialState.disabledById,
        initialState.expandedById,
        initialState.selectedById,
        initialValues === null || initialValues === void 0 ? void 0 : initialValues.activeItemId,
        initialValues === null || initialValues === void 0 ? void 0 : initialValues.disabledById,
        initialValues === null || initialValues === void 0 ? void 0 : initialValues.expandedById,
        initialValues === null || initialValues === void 0 ? void 0 : initialValues.selectedById,
    ]);
    const innerState = useListState({
        initialState: initValues,
        withExpandedState,
    });
    const realState = React.useMemo(() => {
        if (controlledState) {
            return Object.assign(Object.assign({}, innerState), controlledState);
        }
        return innerState;
    }, [controlledState, innerState]);
    const { visibleFlattenIds, idToFlattenIndex, rootIds } = useFlattenListItems({
        items,
        /**
         * By default controlled from list items declaration state
         */
        expandedById: realState.expandedById,
        getItemId,
    });
    return {
        state: realState,
        structure: {
            rootIds,
            items,
            visibleFlattenIds,
            idToFlattenIndex,
            itemsById,
            groupsState,
            itemsState,
        },
    };
};
