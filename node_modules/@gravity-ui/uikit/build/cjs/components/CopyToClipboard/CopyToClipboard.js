"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopyToClipboard = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const react_copy_to_clipboard_1 = tslib_1.__importDefault(require("react-copy-to-clipboard"));
const INITIAL_STATUS = 'pending';
function CopyToClipboard(props) {
    const { children, text, options, timeout, onCopy } = props;
    const [status, setStatus] = react_1.default.useState(INITIAL_STATUS);
    const timerIdRef = react_1.default.useRef();
    const content = react_1.default.useMemo(() => children(status), [children, status]);
    const handleCopy = react_1.default.useCallback((copyText, result) => {
        setStatus(result ? 'success' : 'error');
        window.clearTimeout(timerIdRef.current);
        timerIdRef.current = window.setTimeout(() => setStatus(INITIAL_STATUS), timeout);
        onCopy === null || onCopy === void 0 ? void 0 : onCopy(copyText, result);
    }, [onCopy, timeout]);
    react_1.default.useEffect(() => () => window.clearTimeout(timerIdRef.current), []);
    if (!react_1.default.isValidElement(content)) {
        throw new Error('Content must be a valid react element');
    }
    return (react_1.default.createElement(react_copy_to_clipboard_1.default, { text: text, onCopy: handleCopy, options: options }, content));
}
exports.CopyToClipboard = CopyToClipboard;
