"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSystemTheme = exports.getDarkMediaMatch = exports.supportsMatchMedia = exports.updateBodyDirection = exports.updateBodyClassName = void 0;
const cn_1 = require("../utils/cn");
const constants_1 = require("./constants");
const b = (0, cn_1.block)(constants_1.ROOT_CLASSNAME);
const rootClassName = b();
function updateBodyClassName({ theme, nativeScrollbar = false, className, prevClassName, }) {
    const bodyEl = document.body;
    if (!bodyEl.classList.contains(rootClassName)) {
        bodyEl.classList.add(rootClassName);
    }
    if (prevClassName) {
        const parsedPrevCustomRootClassNames = prevClassName.split(' ');
        parsedPrevCustomRootClassNames.forEach((cls) => {
            if (cls) {
                bodyEl.classList.remove(cls);
            }
        });
    }
    if (className) {
        const parsedCustomRootClassNames = className.split(' ');
        parsedCustomRootClassNames.forEach((cls) => {
            if (cls && !bodyEl.classList.contains(cls)) {
                bodyEl.classList.add(cls);
            }
        });
    }
    [...bodyEl.classList].forEach((cls) => {
        if (cls.startsWith((0, cn_1.modsClassName)(b({ theme: true })))) {
            bodyEl.classList.remove(cls);
        }
    });
    bodyEl.classList.add((0, cn_1.modsClassName)(b({ theme })));
    const modifiers = {
        'native-scrollbar': nativeScrollbar,
    };
    for (const [key, value] of Object.entries(modifiers)) {
        bodyEl.classList.toggle((0, cn_1.modsClassName)(b({ [key]: true })), value);
    }
}
exports.updateBodyClassName = updateBodyClassName;
function updateBodyDirection(direction) {
    const bodyEl = document.body;
    if (direction === constants_1.DEFAULT_DIRECTION) {
        bodyEl.removeAttribute('dir');
    }
    else {
        bodyEl.setAttribute('dir', direction);
    }
}
exports.updateBodyDirection = updateBodyDirection;
exports.supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';
const getDarkMediaMatch = () => window.matchMedia('(prefers-color-scheme: dark)');
exports.getDarkMediaMatch = getDarkMediaMatch;
function getSystemTheme() {
    if (exports.supportsMatchMedia) {
        return (0, exports.getDarkMediaMatch)().matches ? 'dark' : 'light';
    }
    else {
        return 'light';
    }
}
exports.getSystemTheme = getSystemTheme;
