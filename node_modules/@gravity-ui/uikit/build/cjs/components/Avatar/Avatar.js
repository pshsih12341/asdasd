"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatar = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const cn_1 = require("../utils/cn");
const AvatarIcon_1 = require("./AvatarIcon");
const AvatarImage_1 = require("./AvatarImage");
const AvatarText_1 = require("./AvatarText");
const constants_1 = require("./constants");
require("./Avatar.css");
const b = (0, cn_1.block)('avatar');
exports.Avatar = react_1.default.forwardRef((props, ref) => {
    const { size = constants_1.DEFAULT_AVATAR_SIZE, theme = 'normal', view = 'filled', backgroundColor, borderColor, title, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, className, style: styleProp, qa, } = props;
    const style = Object.assign({ backgroundColor, color: borderColor }, styleProp);
    const renderContent = () => {
        if ('imgUrl' in props && props.imgUrl) {
            return (react_1.default.createElement(AvatarImage_1.AvatarImage, { className: b('image'), imgUrl: props.imgUrl, fallbackImgUrl: props.fallbackImgUrl, sizes: props.sizes, srcSet: props.srcSet, alt: props.alt || title, loading: props.loading, size: size }));
        }
        if ('icon' in props && props.icon) {
            return (react_1.default.createElement(AvatarIcon_1.AvatarIcon, { className: b('icon'), icon: props.icon, color: props.color, size: size }));
        }
        if ('text' in props && props.text) {
            return (react_1.default.createElement(AvatarText_1.AvatarText, { className: b('text'), text: props.text, color: props.color, size: size }));
        }
        return null;
    };
    return (react_1.default.createElement("div", { className: b({ size, theme, view, 'with-border': Boolean(borderColor) }, className), title: title, role: "img", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, style: style, "data-qa": qa, ref: ref }, renderContent()));
});
exports.Avatar.displayName = 'Avatar';
