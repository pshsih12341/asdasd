"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionTooltip = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const hooks_1 = require("../../hooks");
const private_1 = require("../../hooks/private");
const Hotkey_1 = require("../Hotkey");
const Popup_1 = require("../Popup");
const cn_1 = require("../utils/cn");
require("./ActionTooltip.css");
const DEFAULT_PLACEMENT = ['bottom', 'top'];
const b = (0, cn_1.block)('action-tooltip');
function ActionTooltip(props) {
    const { placement = DEFAULT_PLACEMENT, title, hotkey, children, className, contentClassName, description, disabled = false, style, qa, id, disablePortal } = props, delayProps = tslib_1.__rest(props, ["placement", "title", "hotkey", "children", "className", "contentClassName", "description", "disabled", "style", "qa", "id", "disablePortal"]);
    const [anchorElement, setAnchorElement] = react_1.default.useState(null);
    const tooltipVisible = (0, private_1.useTooltipVisible)(anchorElement, delayProps);
    const renderPopup = () => {
        return (react_1.default.createElement(Popup_1.Popup, { id: id, disablePortal: disablePortal, role: "tooltip", className: b(null, className), style: style, open: tooltipVisible && !disabled, placement: placement, anchorRef: { current: anchorElement }, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa: qa },
            react_1.default.createElement("div", { className: b('content', contentClassName) },
                react_1.default.createElement("div", { className: b('heading') },
                    react_1.default.createElement("div", { className: b('title') }, title),
                    hotkey && react_1.default.createElement(Hotkey_1.Hotkey, { view: "dark", value: hotkey, className: b('hotkey') })),
                description && react_1.default.createElement("div", { className: b('description') }, description))));
    };
    const child = react_1.default.Children.only(children);
    const childRef = child.ref;
    const ref = (0, hooks_1.useForkRef)(setAnchorElement, childRef);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.cloneElement(child, { ref }),
        anchorElement ? renderPopup() : null));
}
exports.ActionTooltip = ActionTooltip;
