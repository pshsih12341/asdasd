"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClipboardButton = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const ActionTooltip_1 = require("../ActionTooltip");
const Button_1 = require("../Button");
const ClipboardIcon_1 = require("../ClipboardIcon");
const CopyToClipboard_1 = require("../CopyToClipboard");
const i18n_1 = tslib_1.__importDefault(require("./i18n"));
const DEFAULT_TIMEOUT = 1000;
const ButtonSizeToIconSize = {
    xs: 12,
    s: 16,
    m: 16,
    l: 16,
    xl: 20,
};
const ClipboardButtonComponent = (props) => {
    const { size = 'm', hasTooltip = true, tooltipInitialText = (0, i18n_1.default)('startCopy'), tooltipSuccessText = (0, i18n_1.default)('endCopy'), status, view = 'flat', extraProps = {}, children, iconPosition = 'start' } = props, rest = tslib_1.__rest(props, ["size", "hasTooltip", "tooltipInitialText", "tooltipSuccessText", "status", "view", "extraProps", "children", "iconPosition"]);
    const buttonIcon = (react_1.default.createElement(Button_1.Button.Icon, null,
        react_1.default.createElement(ClipboardIcon_1.ClipboardIcon, { size: ButtonSizeToIconSize[size], status: status })));
    return (react_1.default.createElement(ActionTooltip_1.ActionTooltip, { disabled: !hasTooltip, title: status === 'success' ? tooltipSuccessText : tooltipInitialText },
        react_1.default.createElement(Button_1.Button, Object.assign({ view: view, size: size, extraProps: Object.assign({ 'aria-label': tooltipInitialText }, extraProps) }, rest),
            iconPosition === 'start' ? buttonIcon : null,
            children,
            iconPosition === 'end' ? buttonIcon : null)));
};
function ClipboardButton(props) {
    const { text, timeout = DEFAULT_TIMEOUT, onCopy, options } = props, buttonProps = tslib_1.__rest(props, ["text", "timeout", "onCopy", "options"]);
    return (react_1.default.createElement(CopyToClipboard_1.CopyToClipboard, { text: text, timeout: timeout, onCopy: onCopy, options: options }, (status) => react_1.default.createElement(ClipboardButtonComponent, Object.assign({}, buttonProps, { status: status }))));
}
exports.ClipboardButton = ClipboardButton;
