import React from 'react';
import type { BreadcrumbsItem as IBreadcrumbsItem } from './Breadcrumbs';
import type { RenderBreadcrumbsItem, RenderBreadcrumbsItemContent, RenderBreadcrumbsRootContent } from './types';
export interface Props<T extends IBreadcrumbsItem = IBreadcrumbsItem> {
    item: T;
    isCurrent: boolean;
    isPrevCurrent: boolean;
    renderItemContent?: RenderBreadcrumbsItemContent<T> | RenderBreadcrumbsRootContent<T>;
    renderItem?: RenderBreadcrumbsItem<T>;
}
declare function Item<T extends IBreadcrumbsItem = IBreadcrumbsItem>({ item, isCurrent, isPrevCurrent, renderItemContent, renderItem, }: Props<T>): string | number | boolean | Iterable<React.ReactNode> | React.JSX.Element | null | undefined;
export declare const BreadcrumbsItem: typeof Item & {
    displayName: string;
};
export {};
