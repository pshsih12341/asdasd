"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const hooks_1 = require("../../hooks");
const private_1 = require("../../hooks/private");
const Popup_1 = require("../Popup");
const Text_1 = require("../Text");
const cn_1 = require("../utils/cn");
require("./Tooltip.css");
const b = (0, cn_1.block)('tooltip');
const DEFAULT_PLACEMENT = ['bottom', 'top'];
const Tooltip = (props) => {
    const { children, content, disabled, placement = DEFAULT_PLACEMENT, qa, id, className, style, disablePortal, contentClassName, openDelay = 1000, closeDelay, } = props;
    const [anchorElement, setAnchorElement] = react_1.default.useState(null);
    const tooltipVisible = (0, private_1.useTooltipVisible)(anchorElement, {
        openDelay,
        closeDelay,
        preventTriggerOnFocus: true,
    });
    const renderPopup = () => {
        return (react_1.default.createElement(Popup_1.Popup, { id: id, role: "tooltip", className: b(null, className), style: style, open: tooltipVisible && !disabled, placement: placement, anchorRef: { current: anchorElement }, disablePortal: disablePortal, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa: qa },
            react_1.default.createElement("div", { className: b('content', contentClassName) },
                react_1.default.createElement(Text_1.Text, { variant: "body-short", color: "complementary" }, content))));
    };
    const child = react_1.default.Children.only(children);
    const childRef = child.ref;
    const ref = (0, hooks_1.useForkRef)(setAnchorElement, childRef);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.cloneElement(child, { ref }),
        anchorElement ? renderPopup() : null));
};
exports.Tooltip = Tooltip;
