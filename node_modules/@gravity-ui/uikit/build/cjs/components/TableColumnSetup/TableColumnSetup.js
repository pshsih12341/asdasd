"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableColumnSetup = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const Button_1 = require("../Button");
const Icon_1 = require("../Icon");
const TableColumnSetup_1 = require("../Table/hoc/withTableSettings/TableColumnSetup/TableColumnSetup");
const cn_1 = require("../utils/cn");
const i18n_1 = tslib_1.__importDefault(require("./i18n"));
require("./TableColumnSetup.css");
const b = (0, cn_1.block)('table-column-setup');
const TableColumnSetup = (props) => {
    const { switcher, renderSwitcher: renderSwitcherProps, disabled, popupWidth, popupPlacement, className, items: propsItems, sortable = true, showStatus, onUpdate: propsOnUpdate, } = props;
    const renderStatus = () => {
        if (!showStatus) {
            return null;
        }
        const selected = propsItems.reduce((acc, cur) => (cur.selected ? acc + 1 : acc), 0);
        const all = propsItems.length;
        const status = `${selected}/${all}`;
        return react_1.default.createElement("span", { className: b('status') }, status);
    };
    const renderSwitcher = (switcherProps) => {
        return ((renderSwitcherProps === null || renderSwitcherProps === void 0 ? void 0 : renderSwitcherProps(switcherProps)) ||
            switcher || (react_1.default.createElement(Button_1.Button, { disabled: disabled, onClick: switcherProps.onClick },
            react_1.default.createElement(Icon_1.Icon, { data: icons_1.Gear }),
            (0, i18n_1.default)('button_switcher'),
            renderStatus())));
    };
    const items = propsItems.map(({ id, title, required, selected, sticky }) => ({
        id,
        title,
        isRequired: required,
        isSelected: selected,
        sticky,
    }));
    const onUpdate = (newSettings) => {
        propsOnUpdate(newSettings.map(({ id, isSelected }) => {
            const prevItem = propsItems.find((item) => item.id === id);
            return {
                id,
                selected: isSelected,
                title: prevItem === null || prevItem === void 0 ? void 0 : prevItem.title,
                required: prevItem === null || prevItem === void 0 ? void 0 : prevItem.required,
            };
        }));
    };
    return (react_1.default.createElement(TableColumnSetup_1.TableColumnSetup, { items: items, onUpdate: onUpdate, popupPlacement: popupPlacement, popupWidth: popupWidth, renderSwitcher: renderSwitcher, sortable: sortable, className: b(null, className) }));
};
exports.TableColumnSetup = TableColumnSetup;
