"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useControlledValue = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const prepareParams = (selectedById) => Object.entries(selectedById).reduce((acc, [id, value]) => {
    if (value) {
        acc.push(id);
    }
    return acc;
}, []);
const useControlledValue = ({ defaultValue = [], value: valueProps, onUpdate, }) => {
    const [innerValue, setInnerValue] = react_1.default.useState(defaultValue);
    const value = valueProps !== null && valueProps !== void 0 ? valueProps : innerValue;
    const uncontrolled = !valueProps;
    const result = react_1.default.useMemo(() => {
        const selectedById = value.reduce((acc, val) => {
            acc[val] = true;
            return acc;
        }, {});
        const setSelected = (payload) => {
            const nextValue = typeof payload === 'function' ? payload(selectedById) : payload;
            const preparedValue = prepareParams(nextValue);
            if (uncontrolled) {
                setInnerValue(preparedValue);
            }
            else {
                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(preparedValue);
            }
        };
        return {
            value,
            selectedById,
            setSelected,
            /**
             * Available only if `uncontrolled` component valiant
             */
            setInnerValue: uncontrolled ? setInnerValue : undefined,
        };
    }, [onUpdate, uncontrolled, value]);
    return result;
};
exports.useControlledValue = useControlledValue;
