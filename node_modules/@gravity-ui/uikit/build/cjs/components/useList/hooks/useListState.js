"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useListState = void 0;
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const react_1 = tslib_1.__importDefault(require("react"));
const useListState = ({ initialState, withExpandedState }) => {
    const initialStateRef = react_1.default.useRef(initialState);
    const needToUpdateInitValues = initialStateRef.current !== initialState;
    initialStateRef.current = initialState;
    const [disabledById, setDisabled] = react_1.default.useState(() => { var _a; return (_a = initialState === null || initialState === void 0 ? void 0 : initialState.disabledById) !== null && _a !== void 0 ? _a : {}; });
    const [selectedById, setSelected] = react_1.default.useState(() => { var _a; return (_a = initialState === null || initialState === void 0 ? void 0 : initialState.selectedById) !== null && _a !== void 0 ? _a : {}; });
    const [expandedById, setExpanded] = react_1.default.useState(() => { var _a; return (_a = initialState === null || initialState === void 0 ? void 0 : initialState.expandedById) !== null && _a !== void 0 ? _a : {}; });
    const [activeItemId, setActiveItemId] = react_1.default.useState(() => initialState === null || initialState === void 0 ? void 0 : initialState.activeItemId);
    if (needToUpdateInitValues) {
        if (initialState === null || initialState === void 0 ? void 0 : initialState.disabledById) {
            setDisabled((prevValues) => (Object.assign(Object.assign({}, initialState.disabledById), prevValues)));
        }
        if (initialState === null || initialState === void 0 ? void 0 : initialState.selectedById) {
            setSelected((prevValues) => (Object.assign(Object.assign({}, initialState.selectedById), prevValues)));
        }
        if (initialState === null || initialState === void 0 ? void 0 : initialState.expandedById) {
            setExpanded((prevValues) => (Object.assign(Object.assign({}, initialState.expandedById), prevValues)));
        }
        setActiveItemId((prevValue) => prevValue !== null && prevValue !== void 0 ? prevValue : initialState === null || initialState === void 0 ? void 0 : initialState.activeItemId);
    }
    const result = {
        disabledById,
        selectedById,
        activeItemId,
        setDisabled,
        setSelected,
        setActiveItemId,
    };
    if (withExpandedState) {
        result.expandedById = expandedById;
        result.setExpanded = setExpanded;
    }
    return result;
};
exports.useListState = useListState;
