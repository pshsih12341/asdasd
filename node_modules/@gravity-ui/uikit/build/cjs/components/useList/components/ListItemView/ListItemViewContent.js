"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemViewContent = exports.isListItemContentPropsGuard = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const Icon_1 = require("../../../Icon");
const Text_1 = require("../../../Text");
const layout_1 = require("../../../layout");
const styles_1 = require("./styles");
const isListItemContentPropsGuard = (props) => {
    return typeof props === 'object' && props !== null && 'title' in props;
};
exports.isListItemContentPropsGuard = isListItemContentPropsGuard;
const ListItemViewSlot = (_a) => {
    var { children, indentation = 1, className } = _a, props = tslib_1.__rest(_a, ["children", "indentation", "className"]);
    return (react_1.default.createElement(layout_1.Flex, Object.assign({ width: indentation * 16, className: (0, styles_1.b)('slot', className) }, props), children));
};
const renderSafeIndentation = (indentation) => {
    if (indentation && indentation >= 1) {
        return (react_1.default.createElement(ListItemViewSlot, { indentation: Math.floor(indentation) }));
    }
    return null;
};
const ListItemViewContent = ({ startSlot, subtitle, endSlot, disabled, hasSelectionIcon, isGroup, indentation, expanded, selected, title, }) => {
    return (react_1.default.createElement(layout_1.Flex, { alignItems: "center", justifyContent: "space-between", gap: "4", className: (0, styles_1.b)('content') },
        react_1.default.createElement(layout_1.Flex, { gap: "2", alignItems: "center", grow: true },
            hasSelectionIcon && (react_1.default.createElement(ListItemViewSlot // reserve space
            , null, selected ? (react_1.default.createElement(Icon_1.Icon, { data: icons_1.Check, size: 16, className: (0, Text_1.colorText)({ color: 'info' }) })) : null)),
            renderSafeIndentation(indentation),
            isGroup ? (react_1.default.createElement(Icon_1.Icon, { className: (0, styles_1.b)('icon', (0, Text_1.colorText)({ color: disabled ? 'hint' : undefined })), data: expanded ? icons_1.ChevronDown : icons_1.ChevronUp, size: 16 })) : null,
            startSlot,
            react_1.default.createElement("div", { className: (0, styles_1.b)('main-content') },
                typeof title === 'string' ? (react_1.default.createElement(Text_1.Text, { ellipsis: true, color: disabled ? 'hint' : undefined, variant: isGroup ? 'subheader-1' : undefined }, title)) : (title),
                typeof subtitle === 'string' ? (react_1.default.createElement(Text_1.Text, { ellipsis: true, color: disabled ? 'hint' : 'secondary' }, subtitle)) : (subtitle))),
        endSlot));
};
exports.ListItemViewContent = ListItemViewContent;
