"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemRecursiveRenderer = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const cn_1 = require("../../../utils/cn");
const isTreeItemGuard_1 = require("../../utils/isTreeItemGuard");
require("./ListRecursiveRenderer.css");
const b = (0, cn_1.block)('list-recursive-renderer');
// Saves the nested html structure for tree data structure
function ListItemRecursiveRenderer(_a) {
    var _b;
    var { id, itemSchema, list } = _a, props = tslib_1.__rest(_a, ["id", "itemSchema", "list"]);
    const node = props.children(id, list.structure.idToFlattenIndex[id]);
    if ((0, isTreeItemGuard_1.isTreeItemGuard)(itemSchema) && itemSchema.children) {
        const isExpanded = list.state.expandedById && id in list.state.expandedById
            ? list.state.expandedById[id]
            : true;
        return (react_1.default.createElement("ul", { style: props.style, className: b(null, props.className), role: "group" },
            node,
            isExpanded &&
                Boolean((_b = list.structure.groupsState[id]) === null || _b === void 0 ? void 0 : _b.childrenIds) &&
                itemSchema.children.map((item, index) => (react_1.default.createElement(ListItemRecursiveRenderer, Object.assign({ list: list, id: list.structure.groupsState[id].childrenIds[index], itemSchema: item, key: index }, props))))));
    }
    return node;
}
exports.ListItemRecursiveRenderer = ListItemRecursiveRenderer;
