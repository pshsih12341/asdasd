"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemView = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const layout_1 = require("../../../layout");
const constants_1 = require("../../constants");
const ListItemViewContent_1 = require("./ListItemViewContent");
const styles_1 = require("./styles");
exports.ListItemView = react_1.default.forwardRef(function ListItemView(_a, ref) {
    var { id, as: asProps, size = 'm', active, selected, disabled, selectionViewType = 'multiple', activeOnHover: propsActiveOnHover, className, height, dragging, style: propsStyle, content, role = 'option', onClick: _onClick } = _a, rest = tslib_1.__rest(_a, ["id", "as", "size", "active", "selected", "disabled", "selectionViewType", "activeOnHover", "className", "height", "dragging", "style", "content", "role", "onClick"]);
    const Tag = asProps || 'li';
    const onClick = disabled ? undefined : _onClick;
    const activeOnHover = typeof propsActiveOnHover === 'boolean' ? propsActiveOnHover : Boolean(onClick);
    const style = Object.assign({ minHeight: `var(--g-list-item-height, ${height !== null && height !== void 0 ? height : constants_1.modToHeight[size][Number(Boolean((0, ListItemViewContent_1.isListItemContentPropsGuard)(content) ? content === null || content === void 0 ? void 0 : content.subtitle : false))]}px)` }, propsStyle);
    return (react_1.default.createElement(Tag, Object.assign({ [constants_1.LIST_ITEM_DATA_ATR]: id, role: role, "aria-selected": selected, onClick: onClick, className: (0, styles_1.b)({
            active: dragging || active,
            selected: selected && selectionViewType === 'single',
            activeOnHover,
            radius: size,
            size,
            dragging,
            clickable: Boolean(onClick),
        }, (0, layout_1.spacing)({ px: 2 }, className)), style: style, ref: ref }, rest), (0, ListItemViewContent_1.isListItemContentPropsGuard)(content) ? (react_1.default.createElement(ListItemViewContent_1.ListItemViewContent, Object.assign({}, content, { hasSelectionIcon: selectionViewType === 'multiple', selected: selected, disabled: disabled }))) : (content)));
});
