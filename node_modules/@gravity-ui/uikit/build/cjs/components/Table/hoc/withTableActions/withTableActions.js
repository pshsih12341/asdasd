"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.withTableActions = exports.enhanceSystemColumn = exports.actionsColumnId = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const memoize_1 = tslib_1.__importDefault(require("lodash/memoize"));
const hooks_1 = require("../../../../hooks");
const private_1 = require("../../../../hooks/private");
const Button_1 = require("../../../Button");
const Icon_1 = require("../../../Icon");
const Menu_1 = require("../../../Menu");
const Popup_1 = require("../../../Popup");
const cn_1 = require("../../../utils/cn");
const getComponentName_1 = require("../../../utils/getComponentName");
const i18n_1 = tslib_1.__importDefault(require("../../i18n"));
require("./withTableActions.css");
exports.actionsColumnId = '_actions';
function enhanceSystemColumn(columns, enhancer) {
    const existedColumn = columns.find(({ id }) => id === exports.actionsColumnId);
    const systemColumn = existedColumn || {
        id: exports.actionsColumnId,
        name: '',
        sticky: 'end',
        width: 28, // button width
        placeholder: '',
    };
    enhancer(systemColumn);
    return existedColumn ? columns : [...columns, systemColumn];
}
exports.enhanceSystemColumn = enhanceSystemColumn;
const isActionGroup = (config) => {
    return Array.isArray(config.items);
};
const b = (0, cn_1.block)('table');
const actionsCn = b('actions');
const actionsButtonCn = b('actions-button');
const bPopup = (0, cn_1.block)('table-action-popup');
const menuCn = bPopup('menu');
const menuItemCn = bPopup('menu-item');
const DEFAULT_PLACEMENT = ['bottom-end', 'top-end', 'auto'];
const DefaultRowActions = ({ index, item, getRowActions, getRowDescriptor, rowActionsSize, isRowDisabled, }) => {
    var _a;
    const [isPopupOpen, , closePopup, togglePopup] = (0, private_1.useBoolean)(false);
    const anchorRef = react_1.default.useRef(null);
    const rowId = (0, hooks_1.useUniqId)();
    if (getRowActions === undefined) {
        return null;
    }
    const renderPopupMenuItem = (action, index) => {
        if (isActionGroup(action)) {
            return (react_1.default.createElement(Menu_1.Menu.Group, { key: index, label: action.title }, action.items.map(renderPopupMenuItem)));
        }
        const { text, icon, handler, href } = action, restProps = tslib_1.__rest(action, ["text", "icon", "handler", "href"]);
        return (react_1.default.createElement(Menu_1.Menu.Item, Object.assign({ key: index, onClick: (event) => {
                event.stopPropagation();
                handler(item, index, event);
                closePopup();
            }, href: typeof href === 'function' ? href(item, index) : href, iconStart: icon, className: menuItemCn }, restProps), text));
    };
    const disabled = ((_a = getRowDescriptor === null || getRowDescriptor === void 0 ? void 0 : getRowDescriptor(item, index)) === null || _a === void 0 ? void 0 : _a.disabled) || (isRowDisabled === null || isRowDisabled === void 0 ? void 0 : isRowDisabled(item, index));
    const actions = getRowActions(item, index);
    if (actions.length === 0) {
        return null;
    }
    return (react_1.default.createElement("div", { className: actionsCn },
        react_1.default.createElement(Popup_1.Popup, { open: isPopupOpen, anchorRef: anchorRef, placement: DEFAULT_PLACEMENT, onOutsideClick: closePopup, id: rowId },
            react_1.default.createElement(Menu_1.Menu, { className: menuCn, size: rowActionsSize }, actions.map(renderPopupMenuItem))),
        react_1.default.createElement(Button_1.Button, { view: "flat-secondary", className: actionsButtonCn, onClick: togglePopup, size: rowActionsSize, ref: anchorRef, disabled: disabled, extraProps: {
                'aria-label': (0, i18n_1.default)('label-actions'),
                'aria-expanded': isPopupOpen,
                'aria-controls': rowId,
            } },
            react_1.default.createElement(Icon_1.Icon, { data: icons_1.Ellipsis }))));
};
function withTableActions(TableComponent) {
    var _a;
    const componentName = (0, getComponentName_1.getComponentName)(TableComponent);
    const displayName = `withTableActions(${componentName})`;
    return _a = class extends react_1.default.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    popupOpen: false,
                    popupData: null,
                };
                this.renderBodyCell = (item, index) => {
                    const { getRowActions, rowActionsSize, renderRowActions, isRowDisabled, getRowDescriptor, } = this.props;
                    if (renderRowActions) {
                        return renderRowActions({ item, index });
                    }
                    return (react_1.default.createElement(DefaultRowActions, { index: index, item: item, getRowActions: getRowActions, rowActionsSize: rowActionsSize, getRowDescriptor: getRowDescriptor, isRowDisabled: isRowDisabled }));
                };
                // eslint-disable-next-line @typescript-eslint/member-ordering
                this.enhanceColumns = (0, memoize_1.default)((columns) => enhanceSystemColumn(columns, (systemColumn) => {
                    systemColumn.template = this.renderBodyCell;
                }));
                // eslint-disable-next-line @typescript-eslint/member-ordering
                this.enhanceOnRowClick = (0, memoize_1.default)((onRowClick) => {
                    if (!onRowClick) {
                        return onRowClick;
                    }
                    return (item, index, event) => {
                        if (
                        // @ts-expect-error
                        event.nativeEvent.target.closest(`.${menuCn}`)) {
                            return undefined;
                        }
                        if (
                        // @ts-expect-error
                        event.nativeEvent.target.matches(`.${actionsButtonCn}, .${actionsButtonCn} *`)) {
                            return undefined;
                        }
                        return onRowClick(item, index, event);
                    };
                });
            }
            render() {
                const _b = this.props, { renderRowActions, // eslint-disable-line @typescript-eslint/no-unused-vars
                getRowActions, // eslint-disable-line @typescript-eslint/no-unused-vars
                columns, onRowClick } = _b, restTableProps = tslib_1.__rest(_b, ["renderRowActions", "getRowActions", "columns", "onRowClick"]);
                return (react_1.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: this.enhanceColumns(columns), onRowClick: this.enhanceOnRowClick(onRowClick) })));
            }
        },
        _a.displayName = displayName,
        _a;
}
exports.withTableActions = withTableActions;
