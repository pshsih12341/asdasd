"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.withTableSettings = exports.getActualItems = exports.getColumnStringTitle = exports.filterColumns = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const get_1 = tslib_1.__importDefault(require("lodash/get"));
const isString_1 = tslib_1.__importDefault(require("lodash/isString"));
const last_1 = tslib_1.__importDefault(require("lodash/last"));
const Button_1 = require("../../../Button");
const Icon_1 = require("../../../Icon");
const cn_1 = require("../../../utils/cn");
const getComponentName_1 = require("../../../utils/getComponentName");
const withTableActions_1 = require("../withTableActions/withTableActions");
const withTableSelection_1 = require("../withTableSelection/withTableSelection");
const TableColumnSetup_1 = require("./TableColumnSetup/TableColumnSetup");
const i18n_1 = tslib_1.__importDefault(require("./i18n"));
require("./withTableSettings.css");
function filterColumns(columns, settings) {
    const filteredColumns = settings
        .map(({ id, isSelected }) => ({
        isSelected,
        columnSettings: columns.find((column) => id === column.id),
    }))
        .filter(({ isSelected, columnSettings }) => isSelected && columnSettings)
        .map(({ columnSettings }) => columnSettings);
    if (columns[0] && columns[0].id === withTableSelection_1.selectionColumnId) {
        filteredColumns.unshift(columns[0]);
    }
    const lastColumn = (0, last_1.default)(columns);
    if (lastColumn && lastColumn.id === withTableActions_1.actionsColumnId) {
        filteredColumns.push(lastColumn);
    }
    return filteredColumns;
}
exports.filterColumns = filterColumns;
function getColumnStringTitle(column) {
    if ((0, isString_1.default)(column.name)) {
        return column.name;
    }
    const originalName = (0, get_1.default)(column, ['meta', '_originalName']);
    if ((0, isString_1.default)(originalName)) {
        return originalName;
    }
    return column.id;
}
exports.getColumnStringTitle = getColumnStringTitle;
const getTableColumnSetupItem = (id, isSelected, column) => {
    var _a;
    const isProtected = Boolean((_a = column === null || column === void 0 ? void 0 : column.meta) === null || _a === void 0 ? void 0 : _a.selectedAlways);
    return {
        id,
        isSelected: isProtected ? true : isSelected,
        isRequired: isProtected,
        title: column ? getColumnStringTitle(column) : id,
        sticky: column === null || column === void 0 ? void 0 : column.sticky,
    };
};
function getActualItems(columns, settings) {
    const sortableItems = [];
    settings.forEach(({ id, isSelected }) => {
        const column = columns.find((column) => id === column.id);
        if (column) {
            sortableItems.push(getTableColumnSetupItem(id, isSelected, column));
        }
    });
    columns.forEach((column) => {
        var _a;
        if (column.id !== withTableActions_1.actionsColumnId &&
            column.id !== withTableSelection_1.selectionColumnId &&
            settings.every((setting) => setting.id !== column.id)) {
            const isSelected = ((_a = column.meta) === null || _a === void 0 ? void 0 : _a.selectedByDefault) !== false;
            sortableItems.push(getTableColumnSetupItem(column.id, isSelected, column));
        }
    });
    return sortableItems;
}
exports.getActualItems = getActualItems;
const b = (0, cn_1.block)('table');
const POPUP_PLACEMENT = ['bottom-end', 'bottom', 'top-end', 'top', 'auto'];
function withTableSettings(ComponentOrOptions) {
    function tableWithSettingsFactory(TableComponent, { width, sortable, filterable } = {}) {
        const componentName = (0, getComponentName_1.getComponentName)(TableComponent);
        function TableWithSettings(_a) {
            var { updateSettings, settings, columns, settingsPopupWidth, renderControls, defaultSettings, showResetButton, settingsFilterPlaceholder, settingsFilterEmptyMessage, filterSettings } = _a, restTableProps = tslib_1.__rest(_a, ["updateSettings", "settings", "columns", "settingsPopupWidth", "renderControls", "defaultSettings", "showResetButton", "settingsFilterPlaceholder", "settingsFilterEmptyMessage", "filterSettings"]);
            const defaultActualItems = react_1.default.useMemo(() => {
                if (!defaultSettings) {
                    return undefined;
                }
                return getActualItems(columns, defaultSettings);
            }, [columns, defaultSettings]);
            const enhancedColumns = react_1.default.useMemo(() => {
                const actualItems = getActualItems(columns, settings || []);
                return (0, withTableActions_1.enhanceSystemColumn)(filterColumns(columns, actualItems), (systemColumn) => {
                    systemColumn.name = () => (react_1.default.createElement("div", { className: b('settings') },
                        react_1.default.createElement(TableColumnSetup_1.TableColumnSetup, { popupWidth: settingsPopupWidth || width, popupPlacement: POPUP_PLACEMENT, sortable: sortable, filterable: filterable, filterPlaceholder: settingsFilterPlaceholder, filterEmptyMessage: settingsFilterEmptyMessage, filterSettings: filterSettings, onUpdate: updateSettings, items: actualItems, renderSwitcher: ({ onClick }) => (react_1.default.createElement(Button_1.Button, { view: "flat", className: b('settings-button'), extraProps: { 'aria-label': (0, i18n_1.default)('label_settings') }, onClick: onClick },
                                react_1.default.createElement(Icon_1.Icon, { data: icons_1.Gear }))), renderControls: renderControls, defaultItems: defaultActualItems, showResetButton: showResetButton })));
                });
            }, [
                columns,
                settings,
                settingsPopupWidth,
                updateSettings,
                renderControls,
                defaultActualItems,
                showResetButton,
            ]);
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(TableComponent, Object.assign({}, restTableProps, { columns: enhancedColumns }))));
        }
        TableWithSettings.displayName = `withTableSettings(${componentName})`;
        return TableWithSettings;
    }
    if (typeof ComponentOrOptions === 'function') {
        return tableWithSettingsFactory(ComponentOrOptions);
    }
    else {
        return (TableComponent) => tableWithSettingsFactory(TableComponent, ComponentOrOptions);
    }
}
exports.withTableSettings = withTableSettings;
